@page "/"
@using Fluxor
@using Classes;
@using MovieBlazor.Store.Auth
@inject IState<AuthState> AuthState
@inject IDispatcher Dispatcher
@inject IMovieApiService _movieService
@inject IUserService _userService
@rendermode InteractiveServer
<Fluxor.Blazor.Web.StoreInitializer/>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow-sm p-4">
                <h3 class="text-center mb-4">Вход</h3>

                <input @bind="Username" class="form-control mb-3" placeholder="Логин" />
                <input @bind="Password" type="password" class="form-control mb-3" placeholder="Пароль" />

                <button @onclick="Authorize" class="btn btn-primary w-100">Войти</button>

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    if (IsError)
                    {
                        <div class="alert alert-danger mt-3 mb-0">@ErrorMessage</div>
                    }
                    else
                    {
                        <div class="alert alert-success mt-3 mb-0">@ErrorMessage</div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string Username = "";
    private string Password = "";
    private string ErrorMessage = "";
    private bool IsError = false;

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private async Task Authorize()
    {
        try
        {
            LoginModel loginModel = new LoginModel()
            {
                Login = Username,
                Password = Password
            };

            var response = await _movieService.LoginAsync(loginModel);

            if (!string.IsNullOrEmpty(response.Token))
            {
                string token = response.Token;
                Dispatcher.Dispatch(new LoginAction(token));
                _userService.UpdateFromJwt(token);
                ErrorMessage = $"Авторизация успешна! Добро пожаловать, {Username}!";
                StateHasChanged();
                // Показываем сообщение 3 секунды, потом переходим
                await Task.Delay(3000);

                // Укажи здесь нужный маршрут, например:
                NavigationManager.NavigateTo("/movies"); // <-- замени на нужный тебе маршрут
            }
            else
            {
                ErrorMessage = "Неверный логин или пароль";
            }
        }
        catch
        {
            ErrorMessage = "Ошибка при входе";
        }
    }
}