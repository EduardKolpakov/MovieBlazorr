@page "/movies"
@rendermode InteractiveServer
@using System.Globalization
@using Classes
@using Fluxor
@using Store.Auth
@inject IState<AuthState> authState
@inject IMovieApiService _movieService

<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">Фильмы</h2>
        <a class="btn btn-primary" href="/chats">
            💬 Личные чаты
        </a>
    </div>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }

    @if (Movies == null)
    {
        <p class="text-center">Загрузка...</p>
    }
    else if (Movies.Count == 0)
    {
        <div class="alert alert-info text-center">Нет доступных фильмов</div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var movie in Movies)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">@movie.Name</h5>
                            <p class="card-text text-muted">@movie.Description</p>
                            <hr />
                            <p><strong>Жанр:</strong> @movie.Genre</p>
                            <p><strong>Дата выхода:</strong> @movie.PublishingDate.ToString("d MMMM yyyy", new CultureInfo("ru-RU"))</p>
                            <p><strong>Рейтинг:</strong> ⭐ @movie.Rating.ToString("0.0")</p>
                        </div>
                        <div class="card-footer">
                            <a class="btn btn-primary w-100" href="/chat/movie/@movie.ID_Movie">Обсудить</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<MovieDto> Movies { get; set; } = new();
    private string ErrorMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadMoviesAsync();
    }

    private async Task LoadMoviesAsync()
    {
        try
        {
            var token = authState.Value?.Jwt;
            Console.WriteLine($"[LoadMoviesAsync] Токен: {token ?? "отсутствует"}");

            var response = await _movieService.GetAllMovies(token);

            if (response != null && response.Count > 0)
            {
                Movies = response;
                StateHasChanged();
            }
            else
            {
                ErrorMessage = "Фильмы не найдены.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Ошибка при загрузке фильмов: {ex.Message}";
        }
    }
}